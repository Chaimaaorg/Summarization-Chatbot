# -*- coding: utf-8 -*-
from __future__ import annotations

import logging
from typing import Any, Optional, Union

from langchain.callbacks.manager import AsyncCallbackManagerForToolRun
from langchain.schema import HumanMessage, SystemMessage
# 
from app.models.intermediate_output_schema import IntermediateOutputSchema
from app.models.streaming_schema import StreamingDataTypeEnum
from app.models.tool_model import ToolInputSchema

from app.chat_services.tools.ExtendedBaseTool import ExtendedBaseTool
from app.chat_services.tools.utils.intermediate_tools import get_eden_data
from app.utils.config_loader import get_note_fields_configs

logger = logging.getLogger(__name__)


# class BaseCommentGenerationTool(DocumentRetrievalTool):
class BaseCommentGenerationTool(ExtendedBaseTool):
    """Base Comment Generation Tool."""

    name = "base_comment_generation_tool"
    appendix_title = "Base Comment Generation Appendix"
    # document_ingestion_pipeline: DocumentIngestionPipeline

    async def _arun(
        self,
        *args: Any,
        run_manager: Optional[AsyncCallbackManagerForToolRun] = None,
        **kwargs: Any,
    ) -> str:
        """Use the tool asynchronously."""

        logger.info(f"Launching {self.name}")

        try:
            result = await self._aqa_pdf_chunks(docs="", run_manager=run_manager, query=kwargs.get("query", args[0]))

            if run_manager is not None:
                await run_manager.on_text(
                    f"```data\nDocuments: {'Found Documents'}\n```",
                    data_type=StreamingDataTypeEnum.APPENDIX,
                    tool=self.name,
                    title=self.appendix_title,
                    references=[{"doc_id": "Found Documents", "page_numbers": [], "reference_text": ""}],
                )

            return result

        except Exception as e:
            if run_manager is not None:
                await run_manager.on_tool_error(
                    e,
                    tool=self.name,
                )
                return repr(e)
            raise e

    async def _aqa_pdf_chunks(
        self,
        query: str,
        docs: Optional[str] = None,
        run_manager: Optional[AsyncCallbackManagerForToolRun] = None,
    ) -> str:
        tool_input = ToolInputSchema.parse_raw(query)

        comment_generation_config = getattr(get_note_fields_configs("comment_generation_tools"), self.name, None)

        if comment_generation_config is None:
            raise ValueError(f"Comment generation config not found for {self.name}")

        else:
            eden_data = get_eden_data(tool_input=tool_input)

            intermediate_results = self.retrieve_intermediate_results(
                eden_data=eden_data,
                table_name=comment_generation_config.table_name,
                sub_table_name=comment_generation_config.sub_table_name,
            )

            if comment_generation_config.table_name == "all":
                intermediate_results = (
                    f"This is all the content of the credit note. You will find the financial figures of the client, and all the comments generated by the tool. \n"
                    f" {tool_input.intermediate_steps}"
                    "You will use the above to create an executive summary."
                )


            if comment_generation_config.garanties_years:
                year_n = eden_data.etat_relation_garanties.year_n
                year_n_1 = eden_data.etat_relation_garanties.year_n1
                year_n_2 = eden_data.etat_relation_garanties.year_n2
            else:
                year_n = eden_data.proposition.annee_n
                year_n_1 = eden_data.proposition.annee_n_1
                year_n_2 = eden_data.proposition.annee_n_2

            prompt_message = self.prompt_message.format(
                intermediate_results=intermediate_results,
                questions=comment_generation_config.questions,
                analysis_name=comment_generation_config.analysis_name,
                structure_output=comment_generation_config.structure_output,
                year_n=year_n,
                year_n_1=year_n_1,
                year_n_2=year_n_2,
            )

            question_messages = [
                SystemMessage(content=self.system_context),
                HumanMessage(content=prompt_message),
            ]
            response = await self._agenerate_response(question_messages, discard_fast_llm=True, run_manager=None)
            return response

    def retrieve_intermediate_results(
        self, eden_data: IntermediateOutputSchema, table_name: Optional[str] = None, sub_table_name: Optional[str] = None
    ) -> Union[str, Any]:
        if table_name is None:
            return ""

        data = getattr(eden_data, table_name, None)

        if data is None:
            return "No intermediate results provided."

        if sub_table_name is None:
            return data

        return getattr(data, sub_table_name, "")
